// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Review {
  id              String   @id @default(cuid())
  reviewerInitial String   @db.Char(1)
  reviewerName    String
  reviewText      String   @db.Text
  readMoreLink    String?
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([order, isActive])
}

model MiceCard {
  id          String   @id @default(cuid())
  label       String
  date        DateTime
  content     String
  imageUrl    String
  imageAlt    String
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order, isActive])
}

model FAQ {
  id          String   @id @default(cuid())
  titleEn     String   @db.Text
  titleKo     String   @db.Text
  contentEn   String   @db.Text
  contentKo   String   @db.Text
  category    String?  // Optional category for grouping FAQs
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([order, isActive])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum InquiryType {
  TRAVEL_CONSULTATION
  SHUTTLE_SERVICE
  MICE_SERVICE
}

model Support {
  id          String      @id @default(cuid())
  inquiryType InquiryType
  fullName    String
  email       String
  inquiry     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      InquiryStatus @default(PENDING)
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Booking {
  id            String        @id @default(cuid())
  stripeId      String       @unique // Stripe checkout session ID
  customerEmail String
  customerName  String?
  tripType      String       // "one-way" or "round-trip"
  from          String
  to            String
  departingDate DateTime
  returningDate DateTime?
  departureTime String
  returnTime    String?
  passengers    Int
  address       String?
  price         Float
  status        BookingStatus @default(CONFIRMED)
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?      // Stripe payment intent ID
  paymentMethod String?      // e.g., "card", "ideal", etc.
  paidAt        DateTime?    // When the payment was confirmed
  refundedAt    DateTime?    // In case of refunds
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([createdAt])
  @@index([stripeId])
  @@index([paymentStatus])
}
